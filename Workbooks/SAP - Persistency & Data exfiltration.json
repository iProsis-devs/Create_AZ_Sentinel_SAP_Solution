{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "b4b1bd11-1f18-4903-a3b6-57fd50e0c302",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "ICF Services",
            "subTarget": "ICF",
            "style": "link"
          },
          {
            "id": "a91adc06-f8ab-465f-afb4-4d9008751fb0",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Insecure Operations",
            "subTarget": "insec",
            "style": "link"
          },
          {
            "id": "a0cced2e-7f7c-4fd8-96e3-914896fce721",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Tables",
            "subTarget": "table",
            "style": "link"
          },
          {
            "id": "089fc110-be01-4857-9661-351c5f6c2db4",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Spool & Downloads",
            "subTarget": "spd",
            "style": "link"
          },
          {
            "id": "cb455011-06fb-4334-bb99-dd9714cd2419",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "FTP & Dynamic RFC",
            "subTarget": "ftp",
            "style": "link"
          }
        ]
      },
      "name": "links - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "8476146a-f4de-40d9-b0f7-ab1e994c8145",
            "version": "KqlParameterItem/1.0",
            "name": "TimeSelect",
            "label": "Time Range",
            "type": 4,
            "isGlobal": true,
            "value": {
              "durationMs": 7776000000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "07a16f20-8412-4d88-9a8b-1ab9f48c4a62",
            "version": "KqlParameterItem/1.0",
            "name": "Systems",
            "label": "System",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "ABAPAuditLog_CL | summarize  by  SystemID_s ",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ]
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 1"
    },
    {
      "type": 1,
      "content": {
        "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Internet Communication Framework Services</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies activation or deactivation of ICF Services, new services/handlers.</b></p>"
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "ICF"
      },
      "name": "text - 3"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let ActivatedICF =\r\nABAPTableDataLog_CL\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| lookup ABAPTableDataLog_CL on TimeGenerated, LogKey_s, DBLogID_s // Lookup for combining the data\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where TableField_s1 == \"ICFACTIVE\" // Active status\r\n| where OldValue_s == NewValue_s and OldValue_s != \"\" \r\n| where NewValue_s1 == \"X\" // Status is activated\r\n| project TimeGenerated, Service = NewValue_s, ICFServiceStatus = \"Activated\";\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| lookup ABAPTableDataLog_CL on TimeGenerated, LogKey_s, DBLogID_s // Lookup for combining the data\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where TableField_s1 == \"ICFACTIVE\" // Active status\r\n| where OldValue_s1 == \"X\" // Was activated\r\n| where NewValue_s1 == \"\" // Not activated now\r\n| where OldValue_s == NewValue_s and OldValue_s != \"\"\r\n| project TimeGenerated, Service = NewValue_s, ICFServiceStatus = \"Deactivated\"\r\n| union ActivatedICF\r\n| summarize count() by Service, ICFServiceStatus\r\n",
              "size": 0,
              "title": "ICF Service by Operation",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart",
              "chartSettings": {
                "xAxis": "ICFServiceStatus",
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let ActivatedICF =\r\nABAPTableDataLog_CL\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| lookup ABAPTableDataLog_CL on TimeGenerated, LogKey_s, DBLogID_s // Lookup for combining the data\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where TableField_s1 == \"ICFACTIVE\" // Active status\r\n| where OldValue_s == NewValue_s and OldValue_s != \"\" \r\n| where NewValue_s1 == \"X\" // Status is activated\r\n| project TimeGenerated, Service = NewValue_s, ICFServiceStatus = \"Activated\";\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| lookup ABAPTableDataLog_CL on TimeGenerated, LogKey_s, DBLogID_s // Lookup for combining the data\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where TableField_s1 == \"ICFACTIVE\" // Active status\r\n| where OldValue_s1 == \"X\" // Was activated\r\n| where NewValue_s1 == \"\" // Not activated now\r\n| where OldValue_s == NewValue_s and OldValue_s != \"\"\r\n| project TimeGenerated, Service = NewValue_s, ICFServiceStatus = \"Deactivated\"\r\n| union ActivatedICF\r\n",
              "size": 0,
              "title": "Activation or Deactivation of ICF Service",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ICFServiceStatus",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "colors",
                      "thresholdsGrid": [
                        {
                          "operator": "==",
                          "thresholdValue": "Activated",
                          "representation": "green",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "==",
                          "thresholdValue": "Deactivated",
                          "representation": "redBright",
                          "text": "{0}{1}"
                        },
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "blue",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 1",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where OldValue_s == \"\" and NewValue_s != \"\" // New value is inserted in name -> new service\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, Service = NewValue_s\r\n| summarize Services_Created = count() by bin (TimeGenerated, 24h)",
              "size": 1,
              "title": "Services Created by Time",
              "color": "green",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart",
              "chartSettings": {
                "ySettings": {
                  "max": 10
                }
              }
            },
            "customWidth": "50",
            "name": "query - 3",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFSERVLOC\"\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where OldValue_s == \"\" and NewValue_s != \"\" // New value is inserted in name -> new service\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, Service = NewValue_s\r\n| summarize by Service",
              "size": 1,
              "title": "New ICF Services",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Service",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "query - 2",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFHANDLER\"\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where OldValue_s == \"\" and NewValue_s != \"\" // New value is inserted in name -> new service\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, Service = NewValue_s\r\n| summarize Handlers_Created = count() by bin(TimeGenerated, 24h)",
              "size": 1,
              "title": "Handlers Created by Time",
              "color": "blueDarkDark",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Service",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              },
              "chartSettings": {
                "ySettings": {
                  "max": 10
                }
              }
            },
            "customWidth": "50",
            "name": "query - 4 - Copy",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == \"ICFHANDLER\"\r\n| where TableField_s == \"ICF_NAME\" // Service name\r\n| where OldValue_s == \"\" and NewValue_s != \"\" // New value is inserted in name -> new service\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, Service = NewValue_s\r\n| summarize by Service",
              "size": 1,
              "title": "New ICF Service Handlers",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "tiles",
              "tileSettings": {
                "showBorder": false,
                "titleContent": {
                  "columnMatch": "Service",
                  "formatter": 1
                },
                "leftContent": {
                  "columnMatch": "count_",
                  "formatter": 12,
                  "formatOptions": {
                    "palette": "auto"
                  },
                  "numberFormat": {
                    "unit": 17,
                    "options": {
                      "maximumSignificantDigits": 3,
                      "maximumFractionDigits": 2
                    }
                  }
                }
              }
            },
            "customWidth": "50",
            "name": "query - 4",
            "styleSettings": {
              "margin": "4px"
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "ICF"
      },
      "name": "group - 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Executions of Obsolete/Insecure Operations</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies execution of:</b></p>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Obsolete/insecure Function Module</b></lie>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Obsolete/insecure ABAP Program</b></lie>"
            },
            "name": "text - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet RelTable = \"EUFUNC\"; // Relevant table\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet ObsoleteModules =  _GetWatchlist('SAP - Obsolete Function Modules');\r\n// Maintain if watchlist is not available\r\nlet fixedModules = datatable(FunctionModule:string)['TH_SAPREL','TH_SAPREL2', 'TH_SAPREL3','SUSR_RFC_USER_INTERFACE','RFC_ABAP_INSTALL_AND_RUN']; \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, ObsoleteModules\r\n| summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == RelTable\r\n| extend Module = extract(@\"\\s+(.{1,}\\b)\\s+\", 1, LogKey_s, typeof(string)) // Extract Function Module\r\n| extend FunctionGroup = extract(@\"^FL([^\\s]*)\\s\", 1, LogKey_s, typeof(string)) // Extract Function Group\r\n| extend ExecutionVariant = extract(@\"\\b(\\w+)$\", 1, LogKey_s, typeof(string)) // Extract Execution Varient\r\n| where Module in (UnitedModules) // Module is obsolete\r\n| lookup kind=inner LastLogin on $left.UserName_s == $right.User_s\r\n| summarize by TimeGenerated, SystemID_s, ClientID_s,  AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, Module, FunctionGroup, ExecutionVariant",
              "size": 0,
              "title": "Execution of Obsolete or Insecure Function Module",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Module",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet RelTable = \"EUFUNC\"; // Relevant table\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet ObsoleteModules =  _GetWatchlist('SAP - Obsolete Function Modules');\r\n// Maintain if watchlist is not available\r\nlet fixedModules = datatable(FunctionModule:string)['TH_SAPREL','TH_SAPREL2', 'TH_SAPREL3','SUSR_RFC_USER_INTERFACE','RFC_ABAP_INSTALL_AND_RUN']; \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, ObsoleteModules\r\n| summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == RelTable\r\n| extend Module = extract(@\"\\s+(.{1,}\\b)\\s+\", 1, LogKey_s, typeof(string)) // Extract Function Module\r\n| extend FunctionGroup = extract(@\"^FL([^\\s]*)\\s\", 1, LogKey_s, typeof(string)) // Extract Function Group\r\n| extend ExecutionVariant = extract(@\"\\b(\\w+)$\", 1, LogKey_s, typeof(string)) // Extract Execution Varient\r\n| where Module in (UnitedModules) // Module is obsolete\r\n| lookup kind=inner LastLogin on $left.UserName_s == $right.User_s\r\n| summarize by TimeGenerated, SystemID_s, ClientID_s,  AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, Module, FunctionGroup, ExecutionVariant\r\n| summarize count() by Module",
              "size": 0,
              "title": "Obsolete or Insecure Function Module Execution Count",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 0 - Copy",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\nlet ObsoletePrograms = _GetWatchlist(\"SAP - Obsolete Programs\");\r\n// Maintain if watchlist is not available\r\nlet fixedObPrograms = datatable(ABAPProgram:string)['RSAU_READ_LOG'];\r\nlet UnitedPrograms =\r\ntoscalar(union fixedObPrograms, ObsoletePrograms\r\n| summarize Programs = make_set(ABAPProgram));\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s in (UnitedPrograms) // The program is obsolete\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, ABAPProgramName_s, MessageText_s, TransactionCode_s, MessageID_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s",
              "size": 0,
              "title": "Execution of Obsolete or Insecure Program",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ABAPProgramName_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 1",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\nlet ObsoletePrograms = _GetWatchlist(\"SAP - Obsolete Programs\");\r\n// Maintain if watchlist is not available\r\nlet fixedObPrograms = datatable(ABAPProgram:string)['RSAU_READ_LOG'];\r\nlet UnitedPrograms =\r\ntoscalar(union fixedObPrograms, ObsoletePrograms\r\n| summarize Programs = make_set(ABAPProgram));\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s in (UnitedPrograms) // The program is obsolete\r\n| summarize count() by ABAPProgramName_s",
              "size": 0,
              "title": "Obsolete or Insecure Program Execution Count",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 1 - Copy",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Test Function Module</b></h2>\r\n<tr><Td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\">Identifies testing of a function module.</b></p>"
            },
            "name": "text - 6"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Role = 'Production';\r\nlet ProgramName = 'RS_TESTFRAME_CALL';\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\nlet allSystemRoles = dynamic(['Sandbox', 'Developement', 'QualityAssurance', 'Training', 'Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP', 'CRM', 'BW', 'Solman', 'Gateway', 'Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID: string, SystemRole: string, SystemUsage: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"S4H\", \"Production\", \"ERP\",\r\n    \"XXX\", \"Sandbox\", \"BW\"]\r\n; \r\nlet UnitedSystem = \r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s == ProgramName\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| order by TimeGenerated asc\r\n| project TimeGenerated, User_s, SystemID, ClientID_s, MessageText_s, MessageID_s,\r\n    AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s ",
              "size": 0,
              "title": "Activity of Function Module Tests ",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "name": "query - 4",
            "styleSettings": {
              "margin": "4px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Role = 'Production';\r\nlet ProgramName = 'RS_TESTFRAME_CALL';\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\nlet allSystemRoles = dynamic(['Sandbox', 'Developement', 'QualityAssurance', 'Training', 'Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP', 'CRM', 'BW', 'Solman', 'Gateway', 'Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID: string, SystemRole: string, SystemUsage: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"S4H\", \"Production\", \"ERP\",\r\n    \"XXX\", \"Sandbox\", \"BW\"]\r\n; \r\nlet UnitedSystem = \r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s == ProgramName\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by User_s",
              "size": 0,
              "title": "Users Test Functions",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "query - 4 - Copy",
            "styleSettings": {
              "margin": "4px"
            }
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "insec"
      },
      "name": "group - 4"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Sensitive Tables Direct Access By RFC Logon</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies generic table access by RFC logon</b></p>"
            },
            "name": "text - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['CUZ']); // RFC, Audit Log Classes - Generic Table Access \r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Tables\r\nlet SensitiveTables = _GetWatchlist('SAP - Sensitive Tables');\r\nlet fixedTables = datatable(Table:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"USR02\"]\r\n; \r\nlet RelSystemID = union systemID, fixedSID // Create a variable that stores relevent Systems\r\n| where SystemRole == Role // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n| summarize by SystemID;\r\nlet SensitiveUnionTables = union SensitiveTables, fixedTables // Create a variable that stores relevent sensitive tables\r\n    | summarize by Table;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (AuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| order by TimeGenerated asc\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, TransactionCode_s, ABAPProgramName_s, Table,   Activity, MessageText_s, MessageID_s,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s",
              "size": 1,
              "title": "Sensitive Tables Accessed",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Table",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "margin": "10px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['CUZ']); // RFC, Audit Log Classes - Generic Table Access \r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Tables\r\nlet SensitiveTables = _GetWatchlist('SAP - Sensitive Tables');\r\nlet fixedTables = datatable(Table:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"USR02\"]\r\n; \r\nlet RelSystemID = union systemID, fixedSID // Create a variable that stores relevent Systems\r\n| where SystemRole == Role // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n| summarize by SystemID;\r\nlet SensitiveUnionTables = union SensitiveTables, fixedTables // Create a variable that stores relevent sensitive tables\r\n    | summarize by Table;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (AuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| summarize count() by Table",
              "size": 0,
              "title": "Tables Distribution",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 0 - Copy",
            "styleSettings": {
              "margin": "10px"
            }
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Sensitive Tables Direct Access By Dialog Logon</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies generic table access by dialog logon.</b></p>"
            },
            "name": "text - 5 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['DU9']); // Dialog, Audit Log Classes - Generic Table Access \r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Tables\r\nlet SensitiveTables = _GetWatchlist('SAP - Sensitive Tables');\r\nlet fixedTables = datatable(Table:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"USR02\"]\r\n; \r\nlet RelSystemID = union systemID, fixedSID // Create a variable that stores relevant Systems\r\n| where SystemRole == Role // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n| summarize by SystemID;\r\nlet SensitiveUnionTables = union SensitiveTables, fixedTables // Create a variable that stores relevant sensitive tables\r\n    | summarize by Table;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (AuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| order by TimeGenerated asc\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, TransactionCode_s, ABAPProgramName_s, Table,   Activity, MessageText_s, MessageID_s,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s",
              "size": 1,
              "title": "Sensitive Tables Accessed",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Table",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 2",
            "styleSettings": {
              "margin": "10px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['DU9']); // Dialog, Audit Log Classes - Generic Table Access \r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Tables\r\nlet SensitiveTables = _GetWatchlist('SAP - Sensitive Tables');\r\nlet fixedTables = datatable(Table:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"USR02\"]\r\n; \r\nlet RelSystemID = union systemID, fixedSID // Create a variable that stores relevant Systems\r\n| where SystemRole == Role // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n| summarize by SystemID;\r\nlet SensitiveUnionTables = union SensitiveTables, fixedTables // Create a variable that stores relevant sensitive tables\r\n    | summarize by Table;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (AuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| summarize count() by Table",
              "size": 0,
              "title": "Tables Distribution",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "customWidth": "50",
            "name": "query - 2 - Copy",
            "styleSettings": {
              "margin": "10px"
            }
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Tables</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Logons to tables by type.</b></p>"
            },
            "name": "text - 5 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['CUZ']); // RFC, Audit Log Classes - Generic Table Access \r\nlet DialogAuditClasses = dynamic(['DU9']); // Dialog, Audit Log Classes - Generic Table Access \r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Tables\r\nlet SensitiveTables = _GetWatchlist('SAP - Sensitive Tables');\r\nlet fixedTables = datatable(Table:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"USR02\"]\r\n; \r\nlet RelSystemID = union systemID, fixedSID // Create a variable that stores relevent Systems\r\n| where SystemRole == Role // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n| summarize by SystemID;\r\nlet SensitiveUnionTables = union SensitiveTables, fixedTables // Create a variable that stores relevent sensitive tables\r\n    | summarize by Table;\r\n// Query logic\r\nlet RFC = ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (AuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| order by TimeGenerated asc\r\n| extend Type = \"RFC\";\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project-rename Table = Variable1_s, Activity = Variable2_s\r\n| where MessageID_s in (DialogAuditClasses)\r\n| where SystemID_s in (RelSystemID)\r\n| where Table in (SensitiveUnionTables)\r\n| extend Type = \"Dialog\"\r\n| union RFC\r\n| summarize count() by Type\r\n",
              "size": 0,
              "title": "Dialog/RFC Logons",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart",
              "chartSettings": {
                "ySettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "query - 4"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "table"
      },
      "name": "group - 5"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Spool Actions</b></h2>\r\n<tr><td><p p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies multiple spools requests for a user within a specific timerange.</b></p>"
            },
            "name": "text - 0"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "ddafbb71-cd42-4a9d-acbf-ff2eaee66f10",
                  "version": "KqlParameterItem/1.0",
                  "name": "threshold1",
                  "label": "Threshold for Multiple Spool Executions",
                  "type": 1,
                  "value": "3",
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\d",
                        "match": true,
                        "message": "Enter a number to determine multiple spool threshold"
                      }
                    ]
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  }
                }
              ],
              "style": "formVertical",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 15"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet HoursBucket = 2h; // // How much time between buckets\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPSpoolLog_CL // Get all spool requests\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| summarize UserRequests = count() by bin(TimeGenerated, HoursBucket), SystemID_s, ClientID_s, User_s\r\n| where UserRequests >= toint(\"{threshold1}\") // User requested to print more than threshold\r\n| lookup kind=inner LastLogin on User_s // Check IP of last login\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, UserRequests\r\n",
              "size": 1,
              "title": "Multiple Spool Executions (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User1",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "User_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPSpoolLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s == \"{User1}\"\r\n| project TimeGenerated,SystemID_s, ClientID_s, User_s, SpoolRequestNumber_d, SpoolRequestName_s, SpoolRequestSuffix1_s, SpoolRequestSuffix2_s",
              "size": 1,
              "title": "{User1} Spool Executions",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User1",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet NumberOfRequests = 3; // Number of requests as threshold\r\nlet HoursBucket = 2h; // // How much time between buckets\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPSpoolLog_CL // Get all spool requests\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s == \"{User1}\"\r\n| summarize UserRequests = count() by bin(TimeGenerated, HoursBucket), User_s\r\n",
              "size": 1,
              "title": "{User1} Spool Executions by Time",
              "color": "redBright",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User1",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 1 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPSpoolLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| project TimeGenerated,SystemID_s, ClientID_s, User_s, SpoolRequestNumber_d, SpoolRequestName_s, SpoolRequestSuffix1_s, SpoolRequestSuffix2_s\r\n| summarize count() by SpoolRequestSuffix2_s, SpoolRequestSuffix1_s",
              "size": 0,
              "title": "Spool Requests by Printer",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart",
              "chartSettings": {
                "xAxis": "SpoolRequestSuffix1_s",
                "xSettings": {
                  "numberFormatSettings": {
                    "unit": 0,
                    "options": {
                      "style": "decimal",
                      "useGrouping": true
                    }
                  }
                }
              }
            },
            "name": "query - 3 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Spool Output Actions</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies multiple spool outputs for a user within a specific timerange.</b></p>"
            },
            "name": "text - 4"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "86744350-b2b6-417e-9c2b-01d3315933a8",
                  "version": "KqlParameterItem/1.0",
                  "name": "threshold2",
                  "label": "Threshold for Multiple Output Spool Executions",
                  "type": 1,
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\d",
                        "match": true,
                        "message": "Enter a number to determine multiple spool output threshold"
                      }
                    ]
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "3"
                }
              ],
              "style": "formVertical",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 16"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messeges of connect with user\r\nlet HoursBucket = 2h; // // How much time between buckets\r\n// Query logic\r\nlet LastLogin =\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPSpoolOutputLog_CL // Get all spool outputs\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| summarize UserPrints = count() by bin(TimeGenerated, HoursBucket), SystemID_s, ClientID_s, User_s\r\n| where UserPrints >= toint(\"{threshold2}\") // User requested to print more than threshold\r\n| lookup kind=inner LastLogin on User_s // Get IP of last login\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, UserPrints",
              "size": 1,
              "title": "Multiple Spool Output Executions (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User2",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "User_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "query - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPSpoolOutputLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s == \"{User2}\"\r\n| project TimeGenerated,SystemID_s, ClientID_s, User_s, SpoolRequestNumber_d, OutputRequestNumber_d, OutputDevice_s, FormatType_s",
              "size": 1,
              "title": "{User2} Output Spool Executions",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User2",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 7"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messeges of connect with user\r\nlet NumberOfPrints = 3; // Number of prints as threshold\r\nlet HoursBucket = 2h; // // How much time between buckets\r\n// Query logic\r\nlet LastLogin =\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPSpoolOutputLog_CL // Get all spool outputs\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s == \"{User2}\"\r\n| summarize UserPrints = count() by bin(TimeGenerated, HoursBucket), User_s",
              "size": 1,
              "title": "{User2} Spool Output Executions by Time",
              "color": "redBright",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User2",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 5 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\n// Query Logic\r\nABAPSpoolOutputLog_CL // Get all spool outputs\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| lookup kind=inner ABAPSpoolLog_CL on SpoolRequestNumber_d\r\n| lookup kind=inner LastLogin on User_s\r\n| where User_s != User_s1 // The user that created the request is not the one that printed it\r\n| project TimeGenerated, SystemID_s, ClientID_s, UserCreated = User_s1, UserPrinted = User_s, SpoolRequestNumber_d, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s",
              "size": 1,
              "title": "Spool Takeover -  User Prints a Spool Request which was Created by Other User",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table"
            },
            "name": "query - 8"
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Downloads</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies multiple files downloads for a user within a specific timerange.</b></p>"
            },
            "name": "text - 9"
          },
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "f5e82a34-aefe-4331-92e4-1a976742d3e7",
                  "version": "KqlParameterItem/1.0",
                  "name": "threshold3",
                  "label": "Threshold for Multiple Downloads",
                  "type": 1,
                  "typeSettings": {
                    "paramValidationRules": [
                      {
                        "regExp": "\\d",
                        "match": true,
                        "message": "Enter a number to determine multiple downloads threshold"
                      }
                    ]
                  },
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": "3"
                }
              ],
              "style": "formVertical",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "parameters - 17"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet HoursBucket = 2h; // How much time between buckets\r\nlet AuditClasses = dynamic([\"AUY\"]); // Relevant message\r\n// Query logic\r\nABAPAuditLog_CL // Get all downloads\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| summarize DownloadsByUser = count() by bin(TimeGenerated, HoursBucket), SystemID_s, ClientID_s, User_s, TerminalIPv6_s, Email_s, Host_s\r\n| where DownloadsByUser >= toint(\"{threshold3}\") // User downloaded more than threshold\r\n| project SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s,DownloadsByUser",
              "size": 1,
              "title": "Multiple Files Download (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User3",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "User_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "info",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "query - 10"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let AuditClasses = dynamic([\"AUY\"]); // Relevant message\r\n// Query logic\r\nABAPAuditLog_CL // Get all downloads\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where User_s == \"{User3}\"\r\n| project SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s,ABAPProgramName_s, MessageText_s, Path = Variable3_s",
              "size": 1,
              "title": "{User3} Downloads from System",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User3",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 12"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet NumberOfDownloads = 10; // Number of downloads of user as threshold\r\nlet HoursBucket = 2h; // How much time between buckets\r\nlet AuditClasses = dynamic([\"AUY\"]); // Relevant message\r\n// Query logic\r\nABAPAuditLog_CL // Get all downloads\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s == \"{User3}\"\r\n| where MessageID_s in (AuditClasses)\r\n| summarize DownloadsByUser = count() by bin(TimeGenerated, HoursBucket), User_s",
              "size": 1,
              "title": "{User3} Downloads By Time",
              "color": "redBright",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User3",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 10 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let AuditClasses = dynamic([\"AUY\"]); // Relevant message\r\n// Query logic\r\nABAPAuditLog_CL // Get all downloads\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| summarize count() by User_s",
              "size": 0,
              "title": "Downloads by User",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart"
            },
            "name": "query - 12 - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "spd"
      },
      "name": "group - 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>FTP</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies suspicious activity related to FTP.</b></p>"
            },
            "name": "text - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['DU8']); // Message of Successfull FTP Connection\r\nlet FTPSafeConnections = _GetWatchlist(\"SAP - FTP Servers\");\r\nlet fixedConnections = datatable(Client: string, Description: string,\r\nFTP_Server_Name: string, FTP_Server_Port: string)\r\n    // Maintain these if WatchList is not available    \r\n    [100, \"description\", \"http://ourorgftpserver.com/\", 22]\r\n;\r\nlet UnitedConnections = toscalar(union kind=inner FTPSafeConnections, fixedConnections | summarize Connections = make_set(FTP_Server_Name));\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| where TerminalIPv6_s !in (UnitedConnections) // The IP is unknown\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s,IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, MessageText_s, Server = Variable1_s",
              "size": 1,
              "title": "FTP for Non Authorized Servers (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User1",
              "exportDefaultValue": "SAP",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "Server",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "2",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['DU8']); // Message of Successfull FTP Connection\r\nlet FTPSafeConnections = _GetWatchlist(\"SAP - FTP Servers\");\r\nlet fixedConnections = datatable(Client: string, Description: string,\r\nFTP_Server_Name: string, FTP_Server_Port: string)\r\n    // Maintain these if WatchList is not available    \r\n    [100, \"description\", \"http://ourorgftpserver.com/\", 22]\r\n;\r\nlet UnitedConnections = toscalar(union kind=inner FTPSafeConnections, fixedConnections | summarize Connections = make_set(FTP_Server_Name));\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| where TerminalIPv6_s !in (UnitedConnections) // The IP is unknown\r\n| summarize count() by Server = Variable1_s\r\n",
              "size": 1,
              "title": "Unauthorized Servers FTP Connections",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart",
              "graphSettings": {
                "type": 0
              },
              "chartSettings": {
                "ySettings": {
                  "max": 10
                }
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "customWidth": "50",
            "name": "query - 2 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s=='{User1}'\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, SystemID_s, ClientID_s, MessageID_s ,MessageClass_s, MessageText_s\r\n| take 20",
              "size": 1,
              "title": "Detailed Activity of Suspicious User: {User1}",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "graphSettings": {
                "type": 0
              },
              "mapSettings": {
                "locInfo": "LatLong",
                "sizeSettings": "count_",
                "sizeAggregation": "Sum",
                "legendMetric": "count_",
                "legendAggregation": "Sum",
                "itemColorSettings": {
                  "type": "heatmap",
                  "colorAggregation": "Sum",
                  "nodeColorField": "count_",
                  "heatmapPalette": "greenRed"
                }
              }
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User1",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 2 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['DU1', 'DU2']); // Messages of FTP Whitelist is empty / Contains Placeholders\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, Reason = MessageText_s",
              "size": 1,
              "title": "Insecure FTP Servers Configuration (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User2",
              "exportDefaultValue": "SAP",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['DU1', 'DU2']); // Messages of FTP Whitelist is empty / Contains Placeholders\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| summarize Number_Of_Events = count() by bin(TimeGenerated, 1h)",
              "size": 1,
              "title": "Insecure FTP Servers Configuration by Time",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "customWidth": "50",
            "name": "query - 1 - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s=='{User2}'\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, SystemID_s, ClientID_s, MessageID_s ,MessageClass_s, MessageText_s\r\n| take 20",
              "size": 1,
              "title": "Detailed Activity of Suspicious User: {User2}",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User2",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 1 - Copy - Copy"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['DU1', 'DU2']); // Messages of FTP Whitelist is empty / Contains Placeholders\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| summarize Number_Of_Events = count() by bin(TimeGenerated, 1h)\r\n| make-series Number_Of_Events=avg(Number_Of_Events) on TimeGenerated from ago(30d) to ago(0d) step 1h\r\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(Number_Of_Events, 1.5, -1, 'linefit')\r\n| project-away Score\r\n",
              "size": 1,
              "title": "Insecure FTP Servers Configuration Anomalies",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "name": "query - 1 - Copy - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Dynamic RFC</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies execution of RFC using dynamic destinations.</b></p>"
            },
            "name": "text - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['FU1']); // Message of dynamic RFC execution using dynamic destination\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| parse Variable3_s with \"id=\" Created_RFC_Name\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, ABAPProgramName_s, ExecutedProgram = Variable2_s, Created_RFC_Name",
              "size": 1,
              "title": "Dynamic RFC Destination",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['FU1']); // Message of dynamic RFC execution using dynamic destination\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| parse Variable3_s with \"id=\" Created_RFC_Name\r\n| summarize Dynamic_RFC_Created = count() by bin(TimeGenerated, 1h)",
              "size": 1,
              "title": "Dynamic RFC Destination Creation by Time",
              "color": "green",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "name": "query - 0 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>User Admin</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>User admin actions such as create/delete/update user.</b></p>"
            },
            "name": "text - 6"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "Syslog \r\n| where TimeGenerated {TimeSelect}\r\n| where ProcessName startswith \"HDB\"\r\n| where SyslogMessage contains \"CREATE USER\" or \r\n    SyslogMessage contains 'ALTER USER' or \r\n    SyslogMessage contains 'DROP USER' or \r\n    SyslogMessage contains 'DROP SCHEMA'\r\n| project TimeGenerated, HostIP, SyslogMessage, ProcessName",
              "size": 1,
              "title": "HANA DB - User Admin Actions",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "name": "query - 5"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "ftp"
      },
      "name": "group - 4"
    }
  ],
  "fallbackResourceIds": [
    "/subscriptions/fdee8146-8bcf-460f-86f3-3f788c285efd/resourcegroups/iprosis/providers/microsoft.operationalinsights/workspaces/s4h-sentinel-development"
  ],
  "fromTemplateId": "sentinel-UserWorkbook",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}