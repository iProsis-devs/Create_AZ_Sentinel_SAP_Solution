{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 11,
      "content": {
        "version": "LinkItem/1.0",
        "style": "tabs",
        "links": [
          {
            "id": "1ba57074-aaef-4cd6-9003-ac4fc68396c8",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Initial Access",
            "subTarget": "init",
            "style": "link"
          },
          {
            "id": "6eba249f-f4bc-4125-84c8-904e8b886a5b",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Sensitive Actions",
            "subTarget": "action",
            "style": "link"
          },
          {
            "id": "9b159c64-7c4d-48d0-a8c7-4da7cba485a6",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Configuration Changes",
            "subTarget": "config",
            "style": "link"
          },
          {
            "id": "dd9daa53-50df-4c42-8797-56e8c84530ce",
            "cellValue": "wb-param",
            "linkTarget": "parameter",
            "linkLabel": "Debugging",
            "subTarget": "debug",
            "style": "link"
          }
        ]
      },
      "name": "links - 0"
    },
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "f2d3f0e7-a660-4bbf-8008-80d40683aa93",
            "version": "KqlParameterItem/1.0",
            "name": "TimeSelect",
            "label": "Time Range",
            "type": 4,
            "isGlobal": true,
            "value": {
              "durationMs": 7776000000
            },
            "typeSettings": {
              "selectableValues": [
                {
                  "durationMs": 300000
                },
                {
                  "durationMs": 900000
                },
                {
                  "durationMs": 1800000
                },
                {
                  "durationMs": 3600000
                },
                {
                  "durationMs": 14400000
                },
                {
                  "durationMs": 43200000
                },
                {
                  "durationMs": 86400000
                },
                {
                  "durationMs": 172800000
                },
                {
                  "durationMs": 259200000
                },
                {
                  "durationMs": 604800000
                },
                {
                  "durationMs": 1209600000
                },
                {
                  "durationMs": 2419200000
                },
                {
                  "durationMs": 2592000000
                },
                {
                  "durationMs": 5184000000
                },
                {
                  "durationMs": 7776000000
                }
              ],
              "allowCustom": true
            },
            "timeContext": {
              "durationMs": 86400000
            }
          },
          {
            "id": "668dcf40-2cb2-4b88-b5b7-438d1488eb4e",
            "version": "KqlParameterItem/1.0",
            "name": "Systems",
            "label": "System",
            "type": 2,
            "isRequired": true,
            "isGlobal": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "ABAPAuditLog_CL | summarize  by  SystemID_s ",
            "value": [
              "value::all"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 2592000000
            },
            "queryType": 0,
            "resourceType": "microsoft.operationalinsights/workspaces"
          }
        ],
        "style": "above",
        "queryType": 0,
        "resourceType": "microsoft.operationalinsights/workspaces"
      },
      "name": "parameters - 1"
    },
    {
      "type": 1,
      "content": {
        "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Changes during Debug Mode</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies changes for runtime data during a debugging activity.</b></p>"
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "debug"
      },
      "name": "text - 6"
    },
    {
      "type": 1,
      "content": {
        "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Executions of Sensitive Actions</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies a direct execution of:</b></p>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Sensitive transaction code</b></li>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Sensitive ABAP program</b></li>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Sensitive function module</b></li>\r\n"
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "action"
      },
      "name": "text - 5"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet Role = \"Production\";\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant ABAP Programs\r\nlet SensitiveABAPReports = _GetWatchlist('SAP - Sensitive ABAP Programs');\r\nlet fixedABAPReports = datatable(ABAPProgram:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSPFLDOC\"]\r\n; \r\nlet UnionAbap = \r\n    union SensitiveABAPReports, fixedABAPReports\r\n    | summarize by ABAPProgram;\r\nlet UnitedSystem =\r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Reccommended is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s in (UnionAbap)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by ABAPProgramName_s",
              "size": 0,
              "title": "Execution of a Sensitive ABAP Program",
              "color": "magenta",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "categoricalbar"
            },
            "customWidth": "50",
            "name": "query - 0",
            "styleSettings": {
              "margin": "5px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet Role = 'Production';\r\nlet AuditClasses = dynamic(['AU3']); // Audit Log Classes - Transaction Started\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Transaction Codes\r\nlet SensitiveTcode = _GetWatchlist('SAP - Sensitive Transactions');\r\nlet fixedTcode = datatable(TransactionCode:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSAU_CONFIG\",\"RZ11\",\"SM19\"]\r\n; \r\nlet UnitedCodes = \r\n    union SensitiveTcode, fixedTcode\r\n    | summarize by TransactionCode;\r\nlet UnitedSystem =\r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where TransactionCode_s in (UnitedCodes)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by TransactionCode_s",
              "size": 0,
              "title": "Execution of a Sensitive Transaction Code",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "categoricalbar"
            },
            "customWidth": "50",
            "name": "query - 2",
            "styleSettings": {
              "margin": "5px"
            }
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet RelTable = \"EUFUNC\"; // Relevant table\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet SenseModules =  _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedModules = datatable(FunctionModule:string)['RSAU_CLEAR_AUDIT_LOG','BAPI_USER_CREATE', 'RFC_GET_TABLE_ENTRIES']; \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, SenseModules\r\n| summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == RelTable \r\n| extend Module = extract(@\"\\s+(.{1,}\\b)\\s+\", 1, LogKey_s, typeof(string)) // Extract Function Module\r\n| where Module in (UnitedModules) // Module is sensitive\r\n| lookup kind=inner LastLogin on $left.UserName_s == $right.User_s\r\n| summarize by TimeGenerated, Module\r\n| summarize count() by Module",
              "size": 0,
              "title": "Dialog Execution of Sensitive Function Module",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Role = \"Production\";\r\nlet AuditClasses = dynamic(['AUK']); // Audit Log Classes - Successful RFC call &C (function group = &A)\r\nlet allSystemRoles = dynamic(['Sandbox', 'Developement', 'QualityAssurance', 'Training', 'Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP', 'CRM', 'BW', 'Solman', 'Gateway', 'Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID: string, SystemRole: string, SystemUsage: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"S4H\", \"Production\", \"ERP\",\r\n    \"XXX\", \"Sandbox\", \"BW\"]\r\n; \r\n// Get Relevant Function Modules\r\nlet SensitiveFM = _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedFM = datatable(FunctionModule: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"RSAU_CLEAR_AUDIT_LOG\"]\r\n; \r\nlet UnitedSystems = union systemID, fixedSID\r\n| where SystemRole == Role // Recommended  is Production only\r\n| summarize by SystemID;\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\nlet UnitedSensitive =  union SensitiveFM, fixedFM\r\n| summarize by FunctionModule;\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project-rename FunctionModule = Variable3_s, FunctionGroup = Variable1_s\r\n| where SystemID_s in (UnitedSystems) // The systemID is in this list\r\n| where FunctionModule in (UnitedSensitive) // Function module is sensitive\r\n| summarize by TimeGenerated, FunctionModule\r\n| summarize count() by FunctionModule",
              "size": 0,
              "title": "RFC Execution of a Sensitive Function Module",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet Role = 'Production';\r\nlet TranAuditClasses = dynamic(['AU3']); // Audit Log Classes - Transaction Started\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Transaction Codes\r\nlet SensitiveTcode = _GetWatchlist('SAP - Sensitive Transactions');\r\nlet fixedTcode = datatable(TransactionCode:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSAU_CONFIG\",\"RZ11\",\"SM19\"]\r\n; \r\nlet UnitedCodes = \r\n    union SensitiveTcode, fixedTcode\r\n    | summarize by TransactionCode;\r\nlet UnitedSystem =\r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n// Query logic\r\nlet Transactions =\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (TranAuditClasses)\r\n| where TransactionCode_s in (UnitedCodes)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by bin(TimeGenerated, 1h);\r\nlet RFCAuditClasses = dynamic(['AUK']); // Audit Log Classes - Successful RFC call &C (function group = &A)\r\n// Get Relevant Function Modules\r\nlet SensitiveFM = _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedFM = datatable(FunctionModule: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"RSAU_CLEAR_AUDIT_LOG\"]\r\n; \r\nlet UnitedSensitive =  union SensitiveFM, fixedFM\r\n| summarize by FunctionModule;\r\nlet RFCFunc =\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (RFCAuditClasses)\r\n| project-rename FunctionModule = Variable3_s, FunctionGroup = Variable1_s\r\n| where SystemID_s in (UnitedSystem) // The systemID is in this list\r\n| where FunctionModule in (UnitedSensitive) // Function module is sensitive\r\n| summarize count() by bin(TimeGenerated, 1h);\r\n// Define variables\r\nlet RelTable = \"EUFUNC\"; // Relevant table\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet SenseModules =  _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedModules = datatable(FunctionModule:string)['RSAU_CLEAR_AUDIT_LOG','BAPI_USER_CREATE', 'RFC_GET_TABLE_ENTRIES']; \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, SenseModules\r\n| summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nlet DialogFunc =\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == RelTable \r\n| extend Module = extract(@\"\\s+(.{1,}\\b)\\s+\", 1, LogKey_s, typeof(string)) // Extract Function Module\r\n| extend FunctionGroup = extract(@\"^FL([^\\s]*)\\s\", 1, LogKey_s, typeof(string)) // Extract Function Group\r\n| extend ExecutionVariant = extract(@\"\\b(\\w+)$\", 1, LogKey_s, typeof(string)) // Extract Execution Varient\r\n| where Module in (UnitedModules) // Module is sensitive\r\n| lookup kind=inner LastLogin on $left.UserName_s == $right.User_s\r\n| summarize count() by bin(TimeGenerated, 1h);\r\n// Define Variables\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\n// Get Relevant ABAP Programs\r\nlet SensitiveABAPReports = _GetWatchlist('SAP - Sensitive ABAP Programs');\r\nlet fixedABAPReports = datatable(ABAPProgram:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSPFLDOC\"]\r\n; \r\nlet UnionAbap = \r\n    union SensitiveABAPReports, fixedABAPReports\r\n    | summarize by ABAPProgram;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s in (UnionAbap)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by bin(TimeGenerated, 1h)\r\n| union Transactions\r\n| union RFCFunc\r\n| union DialogFunc\r\n| project-rename Actions = count_",
              "size": 0,
              "title": "Sensitive Actions by Time",
              "color": "redBright",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "areachart"
            },
            "name": "query - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define Variables\r\nlet Role = 'Production';\r\nlet TranAuditClasses = dynamic(['AU3']); // Audit Log Classes - Transaction Started\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n; \r\n// Get Relevant Transaction Codes\r\nlet SensitiveTcode = _GetWatchlist('SAP - Sensitive Transactions');\r\nlet fixedTcode = datatable(TransactionCode:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSAU_CONFIG\",\"RZ11\",\"SM19\"]\r\n; \r\nlet UnitedCodes = \r\n    union SensitiveTcode, fixedTcode\r\n    | summarize by TransactionCode;\r\nlet UnitedSystem =\r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\n// Query logic\r\nlet Transactions =\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (TranAuditClasses)\r\n| where TransactionCode_s in (UnitedCodes)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by bin(TimeGenerated, 1h);\r\nlet RFCAuditClasses = dynamic(['AUK']); // Audit Log Classes - Successful RFC call &C (function group = &A)\r\n// Get Relevant Function Modules\r\nlet SensitiveFM = _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedFM = datatable(FunctionModule: string)\r\n    // Maintain these if WatchList is not available    \r\n    [\"RSAU_CLEAR_AUDIT_LOG\"]\r\n; \r\nlet UnitedSensitive =  union SensitiveFM, fixedFM\r\n| summarize by FunctionModule;\r\nlet RFCFunc =\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (RFCAuditClasses)\r\n| project-rename FunctionModule = Variable3_s, FunctionGroup = Variable1_s\r\n| where SystemID_s in (UnitedSystem) // The systemID is in this list\r\n| where FunctionModule in (UnitedSensitive) // Function module is sensitive\r\n| summarize count() by bin(TimeGenerated, 1h);\r\n// Define variables\r\nlet RelTable = \"EUFUNC\"; // Relevant table\r\nlet AuditLogIn = dynamic(['AU1', 'AU5']); // Messages of connect with user\r\nlet SenseModules =  _GetWatchlist('SAP - Sensitive Function Modules');\r\nlet fixedModules = datatable(FunctionModule:string)['RSAU_CLEAR_AUDIT_LOG','BAPI_USER_CREATE', 'RFC_GET_TABLE_ENTRIES']; \r\nlet UnitedModules =\r\ntoscalar(union fixedModules, SenseModules\r\n| summarize FunctionModules =  make_set(FunctionModule));\r\n// Query logic\r\nlet LastLogin = \r\nABAPAuditLog_CL\r\n| where MessageID_s in (AuditLogIn)\r\n| summarize TimeGenerated = arg_max(TimeGenerated, *) by SystemID_s, ClientID_s, User_s; // Get last connection date for user\r\nlet DialogFunc =\r\nABAPTableDataLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where TableName_s == RelTable \r\n| extend Module = extract(@\"\\s+(.{1,}\\b)\\s+\", 1, LogKey_s, typeof(string)) // Extract Function Module\r\n| extend FunctionGroup = extract(@\"^FL([^\\s]*)\\s\", 1, LogKey_s, typeof(string)) // Extract Function Group\r\n| extend ExecutionVariant = extract(@\"\\b(\\w+)$\", 1, LogKey_s, typeof(string)) // Extract Execution Varient\r\n| where Module in (UnitedModules) // Module is sensitive\r\n| lookup kind=inner LastLogin on $left.UserName_s == $right.User_s\r\n| summarize count() by bin(TimeGenerated, 1h);\r\n// Define Variables\r\nlet AuditClasses = dynamic(['AUW']); // Audit Log Classes - Report Started\r\n// Get Relevant ABAP Programs\r\nlet SensitiveABAPReports = _GetWatchlist('SAP - Sensitive ABAP Programs');\r\nlet fixedABAPReports = datatable(ABAPProgram:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"RSPFLDOC\"]\r\n; \r\nlet UnionAbap = \r\n    union SensitiveABAPReports, fixedABAPReports\r\n    | summarize by ABAPProgram;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where ABAPProgramName_s in (UnionAbap)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by bin(TimeGenerated, 1h)\r\n| union Transactions\r\n| union RFCFunc\r\n| union DialogFunc\r\n| project-rename Actions = count_\r\n| make-series Actions=avg(Actions) on TimeGenerated from ago(30d) to ago(0d) step 1h\r\n| extend (Anomalies, Score, Actions) = series_decompose_anomalies(Actions, 1.5, -1, 'linefit')",
              "size": 0,
              "title": "Sensitive Actions Anomalies",
              "color": "redBright",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "timechart"
            },
            "name": "query - 4 - Copy"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "action"
      },
      "name": "group - 2"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Deactivation of Logs</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies deactivation of logs.</b></p>"
                  },
                  "conditionalVisibility": {
                    "parameterName": "wb-param",
                    "comparison": "isEqualTo",
                    "value": "config"
                  },
                  "name": "text - 6"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - Audit Log Active Status Events\r\nlet AuditClasses = dynamic(['AUJ']);\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where Variable1_s == '0' // Audit Active Status = 0\r\n| summarize Deactivations = count() by bin(TimeGenerated, 24h)",
                    "size": 0,
                    "title": "Deactivation of Security Audit Log",
                    "color": "blueDark",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart"
                  },
                  "name": "query - 0"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "Syslog \r\n| where TimeGenerated {TimeSelect}\r\n| where ProcessName startswith \"HDB\"\r\n| where SyslogMessage contains \"AUDIT CONFIGURATION\" and \r\n    SyslogMessage contains 'global_auditing_state' and \r\n    SyslogMessage contains 'False'\r\n| summarize Deactivations = count() by Time = bin(TimeGenerated, 1h)",
                    "size": 0,
                    "title": "HANA DB - Deactivation of Audit Trail",
                    "color": "yellow",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "timechart"
                  },
                  "name": "query - 1 - Copy",
                  "styleSettings": {
                    "margin": "0"
                  }
                }
              ]
            },
            "name": "group - 7"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Changes in Configuration</b></h2>\r\n<tr><td><p style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Identifies changes in configuration in system, client, transactions etc.</b></p>"
                  },
                  "conditionalVisibility": {
                    "parameterName": "wb-param",
                    "comparison": "isEqualTo",
                    "value": "config"
                  },
                  "name": "text - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - Audit Log Configuration Events\r\nlet AuditClasses = dynamic(['AUE','AUF','AUI','AUJ','FU0','E05']); // Relevant messages\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project \r\n// Details\r\nTimeGenerated, SystemID_s, User_s, MessageText_s,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s\r\n| summarize Changes = count() by bin(TimeGenerated, 1h)",
                    "size": 0,
                    "title": "Security Audit Log Configuration Change",
                    "color": "blueDarkDark",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "chartSettings": {
                      "showDataPoints": true
                    }
                  },
                  "name": "query - 2"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - Audit Log Configuration Events\r\nlet AuditClasses = dynamic(['AUE','AUF','AUI','AUJ','FU0','E05']); // Relevant messages\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project \r\n// Details\r\nTimeGenerated, SystemID_s, User_s, MessageText_s,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s\r\n| summarize Changes = count() by bin(TimeGenerated, 1h)\r\n| make-series Changes=avg(Changes) on TimeGenerated from ago(7d) to ago(0d) step 1h \r\n| extend (Anomalies, Score, Baseline) = series_decompose_anomalies(Changes, 1.5, -1, 'linefit')\r\n| project-away Score",
                    "size": 0,
                    "title": "Security Audit Log Configuration Change Anomalies",
                    "color": "blueDarkDark",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "linechart",
                    "chartSettings": {
                      "showDataPoints": true
                    }
                  },
                  "name": "query - 2 - Copy"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - System Change Configuration\r\nlet AuditClasses = dynamic(['EU1']); // Relevant message\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project \r\n// Details\r\nTimeGenerated, SystemID_s, User_s, TransactionCode_s, SoftwareComponent = Variable1_s, NewModifiabilityStatus = Variable2_s, MessageText_s,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s\r\n",
                    "size": 1,
                    "title": "System Configuration Change",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "User_s",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "warning",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        },
                        {
                          "columnMatch": "NewModifiabilityStatus",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "colors",
                            "thresholdsGrid": [
                              {
                                "operator": "==",
                                "thresholdValue": "Not Modifiable",
                                "representation": "redBright",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "==",
                                "thresholdValue": "Modifiable",
                                "representation": "green",
                                "text": "{0}{1}"
                              },
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "blue",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 3"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - Client Change Configuration\r\nlet AuditClasses = dynamic(['EU2']); // Relevent message\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project-rename  ClientID = Variable1_s \r\n| parse Variable2_s with Currency \"|\" ClientRole \"|\" RecordingChanges \"|\" CrossClientObjectChanges \"|\" ClientCopyProtectionLevel \"|\" ProtectionSAPUpgrade \"|\" CATTeCATT \"|\"  LockedforCopy // Parse every object before the | char \r\n| project TimeGenerated, SystemID_s, User_s, ClientID, \r\nCurrency,ClientRole,RecordingChanges,CrossClientObjectChanges,ClientCopyProtectionLevel,CATTeCATT,LockedforCopy,ProtectionSAPUpgrade,\r\nAccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s\r\n",
                    "size": 1,
                    "title": "Client Configuration Change",
                    "showExportToExcel": true,
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "table",
                    "gridSettings": {
                      "formatters": [
                        {
                          "columnMatch": "ClientID",
                          "formatter": 18,
                          "formatOptions": {
                            "thresholdsOptions": "icons",
                            "thresholdsGrid": [
                              {
                                "operator": "Default",
                                "thresholdValue": null,
                                "representation": "info",
                                "text": "{0}{1}"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  "customWidth": "50",
                  "name": "query - 4"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Audit Log Classes - Transaction UnLock Events\r\n// AUP - Transaction Locked\r\nlet AuditClasses = dynamic(['AUQ']); // AUQ - Transaction Unlocked\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project-rename TransactionCode = Variable1_s\r\n| parse TransactionCode with \"( TR ) \" _TCODE \" - \" ClientTR // Parse to _TCODE and ClientTR\r\n// Specific Client Action (SM01_CUS) / Cross Client (SM01_DEV)\r\n| extend TransactionCode = iif(_TCODE != \"\",_TCODE, TransactionCode) // Check if _TCODE is not empty\r\n| extend ClientTR = iif(ClientTR != \"\",ClientTR, \"CrossClient\") // Check if ClientTR is not empty\r\n| summarize count() by TransactionCode\r\n\r\n",
                    "size": 0,
                    "title": "Transactions Unlocked",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "barchart"
                  },
                  "customWidth": "50",
                  "name": "query - 5",
                  "styleSettings": {
                    "margin": "2px"
                  }
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "// Define variables\r\nlet AuditClasses = dynamic(['BU4']); // Message of dynamic ABAP program\r\nlet TranForABAPGen = _GetWatchlist(\"SAP - Transactions for ABAP Generations\"); // Transactions to exclude\r\n// Maintain if watchlist is not available\r\nlet fixedTran = datatable(TransactionCode:string)['SE11','SE12', \"SE16\", \"SE16N\"];\r\nlet UnitedTransactions =\r\ntoscalar(union TranForABAPGen, fixedTran\r\n| summarize Transactions = make_set(TransactionCode));\r\n// Query logic\r\nABAPAuditLog_CL\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| where TransactionCode_s !in (UnitedTransactions) // Exclude transactions\r\n| summarize count() by ABAPProgramName_s",
                    "size": 0,
                    "title": "Dynamic ABAP Programs",
                    "queryType": 0,
                    "resourceType": "microsoft.operationalinsights/workspaces",
                    "visualization": "categoricalbar"
                  },
                  "customWidth": "50",
                  "name": "query - 6",
                  "styleSettings": {
                    "margin": "4px"
                  }
                }
              ]
            },
            "name": "group - 6"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "config"
      },
      "name": "group - 3"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Role = 'Production';\r\nlet DebuggerProgram = 'RSTPDAMAIN';\r\nlet AuditClasses = dynamic(['CUK','CUL','CUM','CUN','CUO','CUP']); // Audit Log Classes - Debug Activities\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems')\r\n| where SystemRole == Role; // Reccommended is Production only\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n    | where SystemRole == Role // Reccommended is Production only\r\n; \r\nlet SystemUnited = union systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage;\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\nABAPAuditLog_CL \r\n    | where TimeGenerated {TimeSelect}\r\n    | where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n    | where MessageID_s in (AuditClasses) or ABAPProgramName_s == DebuggerProgram // Get logs by messege ID or program name\r\n    | extend Object = extract(@\":\\s\\(?(\\w{1,}\\s?-?\\w{1,})\", 1, MessageText_s, typeof(string)) // Extract Object\r\n    | extend Action = extract(@\":\\s\\(?(\\w{1,}\\s?-?\\w{1,}.{1,}?)\\)?\\(\", 1, MessageText_s, typeof(string)) // Extract Action\r\n    | extend Program = extract(@\"Prgm:(\\w{1,})\", 1, MessageText_s, typeof(string)) // Extract Program\r\n    | extend Function = extract(@\"Funct:(\\w{1,})\", 1, MessageText_s, typeof(string)) // Extract Function\r\n    | extend Include = extract(@\"Incl:(\\w{1,})\", 1, MessageText_s, typeof(string)) // Extract Include\r\n    | extend Line = extract(@\"Line:(\\w{1,})\", 1, MessageText_s, typeof(string)) // Extract Line\r\n    | project-rename SystemID = SystemID_s\r\n    | lookup kind=inner (SystemUnited) on SystemID\r\n    | order by TimeGenerated asc\r\n    | project TimeGenerated, User_s, MessageText_s, ABAPProgramName_s, TransactionCode_s, SystemID, SystemRole, SystemUsage,MessageID_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s, Object , Action, Program, Function, Include, Line",
              "size": 1,
              "title": "Debugging Activities (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "User",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "table",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "ABAPProgramName_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "name": "query - 3"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let Role = 'Production';\r\nlet AuditClasses = dynamic(['CUL']); // Audit Log Classes - Debug Change\r\nlet allSystemRoles = dynamic(['Sandbox','Developement','QualityAssurance','Training','Production']); // Available System Roles\r\nlet allSystemUsage = dynamic (['ERP','CRM','BW','Solman','Gateway','Enterprise Portal']); // Available System Usages\r\n// Get Relevant Systems from WatchList\r\nlet systemID = _GetWatchlist('SAP - Systems');\r\nlet fixedSID = datatable(SystemID:string, SystemRole:string, SystemUsage:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"S4H\",\"Production\",\"ERP\",\r\n    \"XXX\",\"Sandbox\",\"BW\"]\r\n;\r\nlet UnitedSystem = \r\nunion systemID, fixedSID\r\n| summarize by SystemID, SystemRole, SystemUsage\r\n| where SystemRole == Role; // Recommended  is Production only\r\n//| where SystemRole in (allSystemRoles); // Use this for all system roles\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where MessageID_s in (AuditClasses)\r\n| project-rename SystemID = SystemID_s\r\n| lookup kind = inner (UnitedSystem) on SystemID\r\n| summarize count() by User_s\r\n",
              "size": 0,
              "title": "Data Changes By User",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "customWidth": "50",
            "name": "query - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s=='{User}'\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, SystemID_s, ClientID_s, MessageID_s ,MessageClass_s, MessageText_s\r\n| take 20",
              "size": 1,
              "title": "Detailed Activity of Suspicious User: {User}",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "User",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 4"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "debug"
      },
      "name": "group - 7"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "items": [
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Multiple Logons By</b></h2>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>IP - Identifies logon of several users from same IP within scheduled time interval.</b></li>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>User - Identifies logon of the same user from several terminals within scheduled time interval.</b></li>"
            },
            "name": "text - 5"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\n// Audit Log Classes - Dialog Logon Successful, RFC Logon Successful\r\nlet AuditClasses = dynamic(['AU1','AU5']);\r\n// Dialog / CPIC / RFC Int / RFC Ext / SRFC / User Switch / HTTP / Restore Session / API Call\r\nlet DialogLogonTypes = dynamic(['A', 'C', 'F', 'R', 'S', 'U', 'H', 'u', ' ']);\r\nlet excUsers = _GetWatchlist('SAP - Excluded Users'); // Users that should be removed from query\r\nlet fixedExcUsers = datatable(User:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"SYSWF\"]\r\n; \r\nlet UnitedExcUsers =\r\ntoscalar(union excUsers, fixedExcUsers\r\n| summarize Users = make_set(User));\r\nlet IPThreshold = 1;\r\n// Query Logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| where Variable1_s in (DialogLogonTypes)\r\n| where User_s !in (UnitedExcUsers)\r\n| summarize CountIP = dcount(TerminalIPv6_s), IPs = make_set(TerminalIPv6_s), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) by SystemID_s, ClientID_s, User_s, Email_s\r\n| where CountIP > IPThreshold // Count of IP logins from the user is higher than threshold\r\n| mv-expand IPs to typeof(string ) // Show for each IP\r\n| project SystemID_s, ClientID_s, User_s,\r\n    AccountCustomEntity = Email_s, IPCustomEntity = IPs, StartTime, EndTime\r\n| order by StartTime, EndTime desc",
              "size": 1,
              "title": "Multiple Logons by User (Press to Investigate)",
              "exportFieldName": "User_s",
              "exportParameterName": "UserU",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "User_s",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 0"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\nlet AuditClasses = dynamic(['AU1', 'AU5']); // Audit Log Classes - Dialog Logon Successful, RFC Logon Successful\r\nlet DialogLogonTypes = dynamic(['A', 'C', 'F', 'R', 'S', 'U', 'H', 'u', ' ']); // Dialog / CPIC / RFC Int / RFC Ext / SRFC / User Switch / HTTP / Restore Session / API Call\r\nlet excNetworks = _GetWatchlist('SAP - Excluded Networks'); // Networks that should be removed from query\r\nlet fixedNetworks =\r\ndatatable(Network:string)\r\n// Maintain these if WatchList is not available    \r\n    [\"111.68.128.0/1\", \"123.68.128.0/1\"]\r\n; \r\nlet UnitedNetworks =\r\ntoscalar(union excNetworks, fixedNetworks\r\n| summarize Networks = make_set(Network));\r\nlet UsersperIP = 1;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| where Variable1_s in (DialogLogonTypes)\r\n| where TerminalIPv6_s !in (UnitedNetworks)\r\n| extend UserandEmail = pack(\"ID\", User_s, \"Email\", Email_s)\r\n| summarize CountUsers = dcount(strcat(User_s, \"_&_\", Email_s)), Users = make_set(UserandEmail), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) \r\n    by SystemID_s, ClientID_s, TerminalIPv6_s\r\n| where CountUsers > UsersperIP\r\n| mv-expand Users \r\n| evaluate bag_unpack(Users, \"User_\")\r\n| project SystemID_s, ClientID_s, column_ifexists(\"User_ID\", \"\"), AccountCustomEntity = column_ifexists(\"User_Email\", \"\"), IPCustomEntity = TerminalIPv6_s, StartTime, EndTime\r\n| order by StartTime, EndTime desc\r\n",
              "size": 1,
              "title": "Multiple Logons by IP (Press to Investigate)",
              "exportFieldName": "User_ID",
              "exportParameterName": "UserIP",
              "exportDefaultValue": "SAP",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "gridSettings": {
                "formatters": [
                  {
                    "columnMatch": "IPCustomEntity",
                    "formatter": 18,
                    "formatOptions": {
                      "thresholdsOptions": "icons",
                      "thresholdsGrid": [
                        {
                          "operator": "Default",
                          "thresholdValue": null,
                          "representation": "warning",
                          "text": "{0}{1}"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "customWidth": "50",
            "name": "query - 1"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s=='{UserU}'\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, SystemID_s, ClientID_s, MessageID_s ,MessageClass_s, MessageText_s\r\n| take 20",
              "size": 1,
              "title": "{UserU} Detailed Activity",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "UserU",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 2"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "ABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems}))\r\n| where User_s=='{UserIP}'\r\n| order by TimeGenerated desc\r\n| project TimeGenerated, SystemID_s, ClientID_s, MessageID_s ,MessageClass_s, MessageText_s\r\n| take 20",
              "size": 1,
              "title": "{UserIP} Detailed Activity",
              "showExportToExcel": true,
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "customWidth": "50",
            "conditionalVisibility": {
              "parameterName": "UserIP",
              "comparison": "isNotEqualTo",
              "value": "SAP"
            },
            "name": "query - 2 - Copy"
          },
          {
            "type": 1,
            "content": {
              "json": "<tr><td><h2 style=\"font-family: 'Enriqueta', arial, serif; line-height: 1.25; margin: 0 0 10px; font-size: 24px; font-weight: bold;\"><B>Logon Attempts</b></h2>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Users logon from unknown networks.</b></li>\r\n<tr><td><li style=\"color: #333; font-family: 'Muli', sans-serif; margin-bottom: 15px; font-size: 14px;\"><B>Try to brute force into the system.</b></li>"
            },
            "name": "text - 7"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "// Define variables\r\n// Audit Log Classes - Failed Logons / Password Check\r\nlet AuditClasses = dynamic(['AUO', 'AU2', 'AU6', 'BU1']);\r\nlet perIPLimit = 6;\r\n// Query logic\r\nABAPAuditLog_CL \r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| extend DetailsBy = pack(\"User\", User_s, \"Email\", Email_s, \"SystemID\", SystemID_s, \"ClientID\", ClientID_s)\r\n| summarize LoginbyIPAttempts = count(), Details = make_set(DetailsBy), StartTime = min(TimeGenerated), EndTime = max(TimeGenerated) \r\n    by TerminalIPv6_s\r\n// Check if number of login attempts per IP is higher than limit\r\n| where LoginbyIPAttempts > perIPLimit \r\n| mv-expand Details\r\n| evaluate bag_unpack(Details, \"Details_\")\r\n| project \r\n    StartTime, EndTime, IPCustomEntity = TerminalIPv6_s,\r\n    AccountCustomEntity = column_ifexists(\"Details_Email\", \"\"), column_ifexists(\"Details_User\", \"\"),\r\n    column_ifexists(\"Details_SystemID\", \"\"),\r\n    column_ifexists(\"Details_ClientID\", \"\")\r\n| summarize count() by Details_User",
              "size": 0,
              "title": "Brute Force Attacks by User",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "barchart",
              "chartSettings": {
                "ySettings": {
                  "max": 10
                }
              }
            },
            "name": "query - 4"
          },
          {
            "type": 3,
            "content": {
              "version": "KqlItem/1.0",
              "query": "let AuditClasses = dynamic(['AU1','AU5']); // Audit Log Classes - Dialog Logon Successful, RFC Logon Successful\r\n// Dialog / CPIC / RFC Int / RFC Ext / SRFC / User Switch / HTTP / Restore Session / API Call\r\nlet DialogLogonTypes = dynamic(['A', 'C', 'F', 'R', 'S', 'U', 'H', 'u', ' ']);\r\nlet Networks = _GetWatchlist('SAP - Networks'); \r\nlet fixedNetworks = datatable(Network: string)['111.68.128.0/17']; // Maintain these if watchlist is not available\r\nlet allNetworks = union Networks, fixedNetworks\r\n    | summarize by Network;\r\nABAPAuditLog_CL\r\n// Add audit classes\r\n| where TimeGenerated {TimeSelect}\r\n| where (SystemID_s in ({Systems}) or  '*' in ({Systems})) \r\n| where MessageID_s in (AuditClasses)\r\n| where Variable1_s in (DialogLogonTypes) // Is a dialog logon type from the list\r\n| where isnotempty(TerminalIPv6_s) // There is a Ipv6 address\r\n| evaluate ipv4_lookup(allNetworks, TerminalIPv6_s, Network, return_unmatched = true)\r\n// Similar to regular lookup, by ipv4 address, unmatched is like left join\r\n| where isempty(Network) // Network is not familiar\r\n// Details\r\n| project TimeGenerated, SystemID_s, ClientID_s, User_s, TransactionCode_s, MessageText_s, AccountCustomEntity = Email_s, IPCustomEntity = TerminalIPv6_s, HostCustomEntity = Host_s\r\n| summarize count() by IPCustomEntity",
              "size": 0,
              "title": "Logins by Unexpected Networks",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces",
              "visualization": "piechart"
            },
            "name": "query - 5"
          }
        ]
      },
      "conditionalVisibility": {
        "parameterName": "wb-param",
        "comparison": "isEqualTo",
        "value": "init"
      },
      "name": "group - 3"
    }
  ],
  "fallbackResourceIds": [
    "/subscriptions/fdee8146-8bcf-460f-86f3-3f788c285efd/resourcegroups/iprosis/providers/microsoft.operationalinsights/workspaces/s4h-sentinel-development"
  ],
  "fromTemplateId": "sentinel-UserWorkbook",
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}